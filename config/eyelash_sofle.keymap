#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    behaviors {
    };

    combos {
        compatible = "zmk,combos";

        rgb {
            bindings = <&mo 3>;
            key-positions = <57 59>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp ESC     &kp N1        &kp N2        &kp N3     &kp N4  &kp N5       &kp UP_ARROW     &kp N6      &kp N7  &kp N8     &kp N9      &kp N0       &kp GRAVE
&kp TAB     &kp Q         &kp W         &kp E      &kp R   &kp T        &kp DOWN_ARROW   &kp Y       &kp U   &kp I      &kp O       &kp P        &kp BACKSPACE
&kp LCTRL   &kp A         &kp S         &kp D      &kp F   &kp G        &kp LEFT_ARROW   &kp H       &kp J   &kp K      &kp L       &kp TILDE    &kp APOS
&kp LSHFT   &kp Z         &kp X         &kp C      &kp V   &lt 4 B      &kp RIGHT_ARROW  &kp N       &kp M   &kp COMMA  &kp DOT     &kp FSLH     &kp RIGHT_SHIFT
&kp C_MUTE  &kp LEFT_GUI  &kp LEFT_ALT  &kp LCTRL  &mo 1   &kp SPACE    &kp ENTER        &kp RETURN  &mo 2   &mo 2      &kp K_UNDO  &kp K_AGAIN
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>;
            display-name = "LAYER0";
        };

        layer_1 {
            bindings = <
&none       &none           &none            &none             &none              &none                &mmv MOVE_UP     &none             &none          &none                 &none                  &none         &none
&trans      &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp DELETE           &mmv MOVE_DOWN   &none             &kp UNDER      &kp LESS_THAN         &kp GREATER_THAN       &kp DOLLAR    &trans
&trans      &kp SEMICOLON   &kp SLASH        &kp MINUS         &kp COLON          &kp DOUBLE_QUOTES    &mmv MOVE_LEFT   &kp SINGLE_QUOTE  &kp BACKSLASH  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp KP_EQUAL  &none
&trans      &none           &none            &none             &kp PLUS           &none                &mmv MOVE_RIGHT  &none             &kp ASTRK      &none                 &none                  &none         &trans
&kp C_MUTE  &trans          &trans           &trans            &trans             &trans               &mkp LCLK        &trans            &trans         &trans                &trans                 &trans
            >;

            display-name = "SYMBOLS";
            sensor-bindings = <&scroll_encoder>;
        };

        MOVEMENT {
            bindings = <
&kp F1  &kp F2  &kp F3         &kp F4          &kp F5     &kp F6           &mmv MOVE_UP     &kp F7           &kp F8    &kp F9        &kp F10    &kp F11  &kp F12
&trans  &none   &kp C_AC_HOME  &trans          &kp END    &kp BACKSPACE    &mmv MOVE_DOWN   &kp PRINTSCREEN  &trans    &kp UP_ARROW  &none      &none    &none
&trans  &none   &kp LEFT_ALT   &kp LEFT_SHIFT  &kp LCTRL  &trans           &mmv MOVE_LEFT   &trans           &kp LEFT  &kp DOWN      &kp RIGHT  &none    &trans
&trans  &none   &trans         &none           &trans     &trans           &mmv MOVE_RIGHT  &trans           &none     &sys_reset    &none      &none    &trans
&trans  &trans  &trans         &trans          &trans     &trans           &mkp LCLK        &trans           &trans    &trans        &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        RGB {
            bindings = <
&trans  &trans           &trans      &trans           &trans           &trans             &rgb_ug RGB_BRI  &trans           &trans           &trans           &trans  &trans  &trans
&trans  &rgb_ug RGB_TOG  &bl BL_TOG  &bl BL_CYCLE     &trans           &trans             &rgb_ug RGB_BRD  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_SPI  &trans  &trans  &trans
&trans  &rgb_ug RGB_EFF  &bl BL_INC  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &rgb_ug RGB_EFF    &rgb_ug RGB_EFR  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_SPD  &trans  &trans  &trans
&trans  &none            &bl BL_DEC  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &rgb_ug RGB_EFR    &rgb_ug RGB_EFF  &trans           &trans           &trans           &trans  &trans  &trans
&trans  &trans           &trans      &trans           &trans           &trans             &rgb_ug RGB_TOG  &trans           &trans           &trans           &trans  &trans
            >;
        };

        AUX {
            bindings = <
&trans  &trans  &trans         &trans        &trans     &trans           &trans  &trans  &trans        &trans        &trans  &trans  &trans
&trans  &trans  &kp C_AC_HOME  &kp UP_ARROW  &kp END    &kp BACKSPACE    &trans  &trans  &bt BT_SEL 0  &bt BT_SEL 1  &trans  &trans  &trans
&trans  &trans  &kp LEFT       &kp DOWN      &kp RIGHT  &trans           &trans  &trans  &trans        &trans        &trans  &trans  &trans
&trans  &trans  &trans         &trans        &trans     &trans           &trans  &trans  &trans        &trans        &trans  &trans  &trans
&trans  &trans  &trans         &trans        &trans     &trans           &trans  &trans  &trans        &trans        &trans  &trans
            >;
        };
    };
};
